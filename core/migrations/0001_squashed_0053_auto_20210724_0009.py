# Generated by Django 3.2.5 on 2021-07-24 03:42

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import markdownx.models
import uuid


class Migration(migrations.Migration):
    replaces = [
        ("core", "0001_initial"),
        ("core", "0002_auto_20210627_1135"),
        ("core", "0003_puzzle_place_slug"),
        ("core", "0004_auto_20210629_1539"),
        ("core", "0005_auto_20210629_1602"),
        ("core", "0006_rename_time_until_hint_minutes_until_unlock"),
        ("core", "0007_auto_20210703_0015"),
        ("core", "0008_auto_20210703_0024"),
        ("core", "0009_alter_puzzle_place_slug"),
        ("core", "0010_auto_20210703_0035"),
        ("core", "0011_alter_puzzle_puzzle_head"),
        ("core", "0012_auto_20210703_0053"),
        ("core", "0013_auto_20210703_0059"),
        ("core", "0014_auto_20210703_0059"),
        ("core", "0015_auto_20210703_0111"),
        ("core", "0016_auto_20210703_0117"),
        ("core", "0017_auto_20210703_0130"),
        ("core", "0018_alter_solve_unlocked_on"),
        ("core", "0019_auto_20210703_0227"),
        ("core", "0020_auto_20210703_0402"),
        ("core", "0021_remove_saltedanswer_is_final"),
        ("core", "0022_auto_20210703_1804"),
        ("core", "0023_auto_20210703_2023"),
        ("core", "0024_puzzle_display_answer"),
        ("core", "0025_auto_20210703_2311"),
        ("core", "0026_auto_20210704_0233"),
        ("core", "0027_auto_20210704_0316"),
        ("core", "0028_auto_20210704_0400"),
        ("core", "0029_auto_20210704_0411"),
        ("core", "0030_auto_20210704_1538"),
        ("core", "0031_auto_20210705_0202"),
        ("core", "0032_auto_20210705_0234"),
        ("core", "0033_auto_20210705_0242"),
        ("core", "0034_auto_20210705_0343"),
        ("core", "0035_token_enabled"),
        ("core", "0036_alter_token_passphrase"),
        ("core", "0037_auto_20210705_0436"),
        ("core", "0038_alter_token_reduced_passphrase"),
        ("core", "0039_auto_20210715_1728"),
        ("core", "0040_token_user"),
        ("core", "0041_auto_20210719_0314"),
        ("core", "0042_unlockable_story_only"),
        ("core", "0043_auto_20210719_0341"),
        ("core", "0044_alter_unlockable_options"),
        ("core", "0045_auto_20210719_0443"),
        ("core", "0046_auto_20210719_0513"),
        ("core", "0047_auto_20210719_0540"),
        ("core", "0048_auto_20210719_0549"),
        ("core", "0049_auto_20210719_0724"),
        ("core", "0050_remove_puzzle_pre_solve_story"),
        ("core", "0051_alter_solution_post_solve_image_alt"),
        ("core", "0052_puzzle_flavor_text"),
        ("core", "0053_auto_20210724_0009"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Hunt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, help_text="The name of this hunt", max_length=80
                    ),
                ),
                (
                    "authors",
                    models.CharField(
                        help_text="The credits for this hunt", max_length=255
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(help_text="When the hunt can be started"),
                ),
                (
                    "visible",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the hunt is visible to people; use false if you're just testing",
                    ),
                ),
                (
                    "volume_number",
                    models.CharField(
                        default="I",
                        help_text="The volume number corresponding to this hunt",
                        max_length=80,
                        unique=True,
                    ),
                ),
                (
                    "allow_skip",
                    models.BooleanField(
                        default=False, help_text="Whether to allow `skip puzzle`"
                    ),
                ),
                (
                    "thumbnail_path",
                    models.CharField(
                        blank=True,
                        help_text="Static argument for thumbnail image",
                        max_length=80,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Hint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cost",
                    models.PositiveSmallIntegerField(
                        help_text="The cost of the hint (patience)"
                    ),
                ),
                (
                    "question",
                    models.CharField(
                        help_text="The question that the hint is for", max_length=120
                    ),
                ),
                (
                    "answer",
                    models.CharField(
                        help_text="The content of the hint", max_length=120
                    ),
                ),
                (
                    "minutes_until_unlock",
                    models.PositiveSmallIntegerField(
                        help_text="Minutes until the hint is visible"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="Steve", help_text="Who are you?", max_length=128
                    ),
                ),
                (
                    "hints_obtained",
                    models.ManyToManyField(
                        help_text="Hints purchased by this token", to="core.Hint"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Unlockable",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name for this unlockable (e.g. place on map)",
                        max_length=80,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="The slug for the unlockable", unique=True
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True, help_text="Emoji for this unlockable", max_length=5
                    ),
                ),
                (
                    "unlock_courage_threshold",
                    models.IntegerField(
                        default=0, help_text="Amount of courage needed to unlock"
                    ),
                ),
                (
                    "unlock_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the unlockable can be unlocked",
                        null=True,
                    ),
                ),
                (
                    "force_visibility",
                    models.BooleanField(
                        blank=True,
                        help_text="Always show or hide",
                        null=True,
                        verbose_name="Show",
                    ),
                ),
                (
                    "courage_bounty",
                    models.IntegerField(
                        default=25,
                        help_text="Amount of courage obtained by solving",
                        verbose_name="Bounty",
                    ),
                ),
                (
                    "hunt",
                    models.ForeignKey(
                        help_text="The hunt this unlockable belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.hunt",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Specifies a parent unlockable",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="core.unlockable",
                    ),
                ),
                (
                    "unlock_needs",
                    models.ForeignKey(
                        blank=True,
                        help_text="If this is nonempty, then unlock only when the target is done",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blocking",
                        to="core.unlockable",
                    ),
                ),
                (
                    "story_only",
                    models.BooleanField(
                        default=False, help_text="If this unlockable is story only"
                    ),
                ),
                (
                    "sort_order",
                    models.SmallIntegerField(
                        default=50,
                        help_text="An integer to sort this unlockable by in the listing",
                    ),
                ),
                (
                    "intro_story_text",
                    models.TextField(
                        blank=True, help_text="Markdown for the pre-entry story"
                    ),
                ),
                (
                    "on_solve_link_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="When solved, link to this instead",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="redirected_by",
                        to="core.unlockable",
                    ),
                ),
            ],
            options={
                "ordering": ("sort_order", "name"),
            },
        ),
        migrations.CreateModel(
            name="Puzzle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=80)),
                (
                    "slug",
                    models.SlugField(help_text="The slug for the puzzle", unique=True),
                ),
                (
                    "content",
                    markdownx.models.MarkdownxField(
                        blank=True, help_text="Markdown for the puzzle content"
                    ),
                ),
                (
                    "puzzle_head",
                    models.TextField(
                        blank=True, help_text="Extra HTML to include in HTML header"
                    ),
                ),
                (
                    "is_meta",
                    models.BooleanField(
                        default=False, help_text="Whether this is a metapuzzle"
                    ),
                ),
                (
                    "unlockable",
                    models.OneToOneField(
                        blank=True,
                        help_text="Associated unlockable for this puzzle",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.unlockable",
                    ),
                ),
                (
                    "flavor_text",
                    markdownx.models.MarkdownxField(
                        blank=True, help_text="Markdown for puzzle flavor text"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Round",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=80)),
                (
                    "slug",
                    models.SlugField(help_text="The slug for the round", unique=True),
                ),
                (
                    "unlockable",
                    models.OneToOneField(
                        blank=True,
                        help_text="Associated unlockable for this round",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.unlockable",
                    ),
                ),
                (
                    "chapter_number",
                    models.CharField(
                        help_text="Chapter identifier for the database",
                        max_length=80,
                        unique=True,
                    ),
                ),
                (
                    "round_text",
                    markdownx.models.MarkdownxField(
                        blank=True, help_text="Markdown for content in the round page"
                    ),
                ),
                (
                    "thumbnail_path",
                    models.CharField(
                        blank=True,
                        help_text="Static argument for thumbnail image",
                        max_length=80,
                    ),
                ),
                (
                    "show_chapter_number",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the chapter should be numbered on screen",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Attempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[(-1, "Found"), (0, "Unlocked"), (1, "Solved")],
                        default=-1,
                    ),
                ),
                (
                    "token",
                    models.ForeignKey(
                        help_text="The token this attempt is for",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.token",
                    ),
                ),
                (
                    "unlockable",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.unlockable",
                    ),
                ),
                (
                    "found_on",
                    models.DateTimeField(
                        blank=True, help_text="When the unlockable is found", null=True
                    ),
                ),
                (
                    "solved_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the unlockable is unlocked",
                        null=True,
                    ),
                ),
                (
                    "unlocked_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the unlockable is unlocked",
                        null=True,
                    ),
                ),
            ],
            options={
                "unique_together": {("token", "unlockable")},
            },
        ),
        migrations.AddField(
            model_name="token",
            name="attempts",
            field=models.ManyToManyField(
                help_text="Attempts attached to this token",
                through="core.Attempt",
                to="core.Unlockable",
            ),
        ),
        migrations.AddField(
            model_name="token",
            name="hashed_passphrase",
            field=models.CharField(
                default="blargh", help_text="Hashed passphrase", max_length=256
            ),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name="token",
            unique_together={("name", "hashed_passphrase")},
        ),
        migrations.AddField(
            model_name="token",
            name="reduced_name",
            field=models.CharField(
                default="qutebrowser",
                help_text="Name with only [a-z][0-9] characters.",
                max_length=128,
            ),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name="token",
            unique_together={("reduced_name", "hashed_passphrase")},
        ),
        migrations.AddField(
            model_name="token",
            name="reduced_passphrase",
            field=models.CharField(
                default="darkblue",
                help_text="Passphrasew ith only [a-z0-9] characters",
                max_length=256,
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="token",
            name="reduced_name",
            field=models.CharField(
                help_text="Name with only [a-z0-9] characters.", max_length=128
            ),
        ),
        migrations.AlterUniqueTogether(
            name="token",
            unique_together={("reduced_name", "reduced_passphrase")},
        ),
        migrations.RemoveField(
            model_name="token",
            name="hashed_passphrase",
        ),
        migrations.AddField(
            model_name="token",
            name="enabled",
            field=models.BooleanField(
                default=True, help_text="Turn off to prevent the token from being used"
            ),
        ),
        migrations.AddField(
            model_name="token",
            name="passphrase",
            field=models.CharField(
                help_text="Magic word needed to retrieve progress",
                max_length=256,
                verbose_name="Magic word",
            ),
        ),
        migrations.AddField(
            model_name="token",
            name="permission",
            field=models.PositiveSmallIntegerField(
                choices=[
                    (0, "Normal user"),
                    (20, "Testsolver"),
                    (40, "Bestsolver"),
                    (60, "Editor"),
                    (80, "Admin"),
                    (100, "Evan Chen"),
                ],
                default=0,
                help_text="Whether this token has any elevated permissions",
            ),
        ),
        migrations.AlterField(
            model_name="token",
            name="hints_obtained",
            field=models.ManyToManyField(
                blank=True, help_text="Hints purchased by this token", to="core.Hint"
            ),
        ),
        migrations.AlterField(
            model_name="token",
            name="reduced_passphrase",
            field=models.CharField(
                help_text="Passphrase with only [a-z0-9] characters", max_length=256
            ),
        ),
        migrations.AlterUniqueTogether(
            name="token",
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name="token",
            name="passphrase",
        ),
        migrations.RemoveField(
            model_name="token",
            name="reduced_passphrase",
        ),
        migrations.AddField(
            model_name="token",
            name="user",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="unlockable",
            name="on_solve_link_to",
            field=models.ForeignKey(
                blank=True,
                help_text="When solved, link to this round instead",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="redirected_by",
                to="core.round",
            ),
        ),
        migrations.AlterField(
            model_name="unlockable",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                help_text="Specifies a parent round",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="children",
                to="core.round",
            ),
        ),
        migrations.CreateModel(
            name="SaltedAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "display_answer",
                    models.CharField(
                        help_text="Display answer to the puzzle", max_length=80
                    ),
                ),
                (
                    "salt",
                    models.SmallIntegerField(
                        default=core.models._rand,
                        help_text="A random number from 0000 to 9999",
                    ),
                ),
                (
                    "message",
                    models.CharField(
                        blank=True,
                        help_text="For partial answers, the nudge to provide solvers",
                        max_length=256,
                    ),
                ),
                (
                    "puzzle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="salted_answers",
                        to="core.puzzle",
                    ),
                ),
                (
                    "is_canonical",
                    models.BooleanField(
                        default=True,
                        help_text="Make this the answer printed by the website for solvers",
                    ),
                ),
                (
                    "is_correct",
                    models.BooleanField(
                        default=True,
                        help_text="Make an answer correct; solver marks as correct if seen.",
                    ),
                ),
            ],
            options={
                "unique_together": {("puzzle", "salt")},
            },
        ),
        migrations.CreateModel(
            name="Solution",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "post_solve_story",
                    markdownx.models.MarkdownxField(
                        blank=True, help_text="Markdown for the post-solve story"
                    ),
                ),
                (
                    "solution_text",
                    markdownx.models.MarkdownxField(
                        blank=True, help_text="Markdown for the puzzle solution"
                    ),
                ),
                (
                    "author_notes",
                    markdownx.models.MarkdownxField(
                        blank=True, help_text="Markdown for the author's notes"
                    ),
                ),
                (
                    "post_solve_image_path",
                    models.CharField(
                        blank=True,
                        help_text="Static path to the post-solve image",
                        max_length=240,
                    ),
                ),
                (
                    "post_solve_image_alt",
                    models.CharField(
                        blank=True,
                        help_text="Alt text for the post-solve image",
                        max_length=240,
                    ),
                ),
                (
                    "puzzle",
                    models.OneToOneField(
                        help_text="The puzzle this is a solution for",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.puzzle",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="unlockable",
            name="intro_story_text",
            field=markdownx.models.MarkdownxField(
                blank=True, help_text="Markdown for the pre-entry story"
            ),
        ),
    ]
