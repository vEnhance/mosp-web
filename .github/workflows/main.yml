name: Tests

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  test:
    name: "Tests + type-check"
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}

      # --- dependency installation ---
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Load cached venv if cache exists
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies if cache miss
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    - name: Install root project
      run: poetry install --no-interaction

      # --- tests ---
    - name: Unit tests
      run: |
        source .venv/bin/activate
        python manage.py migrate
        coverage run manage.py test --shuffle 1337
        coverage lcov -o coverage/lcov.info
    - name: mypy
      run: |
        source .venv/bin/activate
        mypy --ignore-missing-imports $(git ls-files '*.py' | grep -v migrations/ | grep -v /apps.py)
    - name: pyright (via ReviewDog)
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        source .venv/bin/activate
        BASE_PATH="$(cd "$(dirname "$0")" && pwd)"
        cd "${GITHUB_WORKSPACE}/${INPUT_WORKDIR}" || exit 1
        TEMP_PATH="$(mktemp -d)"
        PATH="${TEMP_PATH}:$PATH"

        echo '::group::üê∂ Installing reviewdog ... https://github.com/reviewdog/reviewdog'
        curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "${TEMP_PATH}" "${REVIEWDOG_VERSION}" 2>&1
        echo '::endgroup::'

        echo '::group::üêç Installing pyright ...'
        npm install pyright
        echo '::endgroup::'

        echo '::group::üîé Running pyright with reviewdog üê∂ ...'
        "$(npm bin)/pyright" $(git ls-files '*.py' | grep -v migrations ) --outputjson |
          python3 .github/workflows/pyright_to_rdjson.py  |
          reviewdog -f=rdjson -name="pyright-report" \
            -reporter="github-check" \
            -fail-on-error="true"
        reviewdog_rc=$?
        echo '::endgroup::'
        exit $reviewdog_rc

    - name: Coverage
      uses: coverallsapp/github-action@master
      if: "matrix.python == 3.10"
      with:
        github-token: ${{ secrets.github_token }}

  style:
    name: "Style: pyflakes+yapf"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Setup Python
        uses: actions/setup-python@v2
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      - name: Install PyFlakes + TOML + YAPF
        run: |
          python -m pip install --upgrade pyflakes toml yapf
      - name: Run Pyflakes
        run: |
          pyflakes .
      - name: Run YAPF
        run: |
          yapf $(git ls-files '*.py' | grep -v migrations/ | grep -v /apps.py)
