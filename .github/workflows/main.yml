name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Unit Tests
      run: |
        python manage.py test
    - uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest # Optional. [latest,nightly,v.X.Y.Z]
    - name: Pyright
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        npm install pyright
        # set -euo pipefail
        BASE_PATH="$(cd "$(dirname "$0")" && pwd)"
        cd "${GITHUB_WORKSPACE}/${INPUT_WORKDIR}" || exit 1
        TEMP_PATH="$(mktemp -d)"
        PATH="${TEMP_PATH}:$PATH"

        echo '::group::üê∂ Installing reviewdog ... https://github.com/reviewdog/reviewdog'
        curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b "${TEMP_PATH}" "${REVIEWDOG_VERSION}" 2>&1
        echo '::endgroup::'

        echo '::group::üêç Installing pyright ...'
        npm install pyright
        echo '::endgroup::'

        echo "DEBUGGING LIKE FUCK"
        "$(npm bin)/pyright" --outputjson | cat
        "$(npm bin)/pyright" --outputjson | python3 .github/workflows/pyright_to_rdjson.py | cat
        echo '::group::üîé Running pyright with reviewdog üê∂ ...'
        "$(npm bin)/pyright" "${PYRIGHT_ARGS[@]}" ${INPUT_PYRIGHT_FLAGS:-} |
          python3 .github/workflows/pyright_to_rdjson.py  |
          reviewdog -f=rdjson -name="pyright" \
            -reporter="github-pr-review" \
            -fail-on-error="false"
        reviewdog_rc=$?
        echo '::endgroup::'
        exit $reviewdog_rc
